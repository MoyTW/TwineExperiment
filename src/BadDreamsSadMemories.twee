:: StoryTitle
Bad Dreams, Sad Memories


:: StoryData
{
	"ifid": "730CA05E-972A-4C37-98C3-D7AA046C73B7",
	"format": "SugarCube",
	"format-version": "2.34.1",
	"start": "INTRO",
	"tag-colors": {
		"STRANGE_PLACE": "gray"
	},
	"zoom": 1
}


:: Story Stylesheet [stylesheet]
#ui-bar {
	display: none;
}

/* Styling and Colours of the Right UI Bar. */
#right-ui-bar {
	background-color: #222;
	border-right: 1px solid #444;
	text-align: center;
}

/* Layout and Positioning of the Right UI Bar. */
#right-ui-bar {
	position: fixed;
	z-index: 50;
	top: 0;
	right: 0;
	width: 17.5em;
	height: 100%;
	margin: 0;
	padding: 0;
	-webkit-transition: right .2s ease-in;
	-o-transition: right .2s ease-in;
	transition: right .2s ease-in;
}
#right-ui-bar-tray {
	position: absolute;
	top: .2em;
	left: 0;
	right: 0;
}
#right-ui-bar-toggle {
	display: block;
	position: absolute;
	top: 0;
	left: 0;
	border-left: none;
	padding: .3em .45em .25em;
	-webkit-user-select: none;
}
#right-ui-bar-toggle:before {
	content: "\e81e";
}
#right-ui-bar-body {
	height: 90%;
	height: calc(100% - 2.5em);
	margin: 2.5em 0;
	padding: 0 1.5em;
}
#right-ui-bar-body {
	line-height: 1.5;
	overflow: auto;
}

/* Navigation Bar */
#navigation-buttons {
	display: grid;
}

#nav-north {
  grid-column: 2;
  grid-row: 1;
}

#nav-east {
  grid-column: 3;
  grid-row: 2;
}

#nav-south {
  grid-column: 2;
  grid-row: 3;
}

#nav-west {
  grid-column: 1;
  grid-row: 2;
}

#story {
	margin-right: 20em;
}

/* Stowing of the Right UI Bar. */
#right-ui-bar.stowed {
	right: -15.5em;
}
#right-ui-bar.stowed #right-ui-bar-toggle {
	padding: .3em .55em .25em .35em;
}
#right-ui-bar.stowed #right-ui-bar-toggle:before {
	content: "\e81d";
}
#right-ui-bar.stowed #right-ui-bar-body {
	visibility: hidden;
	-webkit-transition: visibility .2s step-end;
	-o-transition: visibility .2s step-end;
	transition: visibility .2s step-end;
}

#right-ui-bar.stowed~#story {
	margin-right: 4.5em;
}

/* Text */
.player-info {
  font-weight: bold;
  font-style: italic;
}


:: Story JavaScript [script]
var $rightUiBar = $('<div id="right-ui-bar"></div>').insertAfter("#ui-bar");

var rightTray = $rightUiBar.append('<div id="right-ui-bar-tray"><button id="right-ui-bar-toggle" tabindex="0" title="Toggle the Right UI bar" aria-label="Toggle the Right UI bar" type="button"></button></div>');

var rightBody = $rightUiBar.append('<div id="right-ui-bar-body"></div>');

/* Attach the toggle button click. */
$rightUiBar.find('#right-ui-bar-toggle').ariaClick({
		label : "Toggle the Right UI bar"
	}, function () {
		$rightUiBar.toggleClass('stowed');
	});

/* Automatically show the contents of the StoryRightSidebar passage in the right-ui-bar-body element. */
postrender["Display Right Sidebar Contents"] = function (content, taskName) {
	setPageElement('right-ui-bar-body', 'StoryRightSidebar');
};

/*
	To have your code stow the bar use:
	<<addclass "#right-ui-bar" "stowed">>
	
	To unstow the bar use:
	<<removeclass "#right-ui-bar" "stowed">>
*/


:: StoryRightSidebar {"position":"175,375","size":"100,100"}
<h2>$locationName</h2>\
$terror
<<showmeter $terrorMeter ($terror / 100)>>

<div id="navigation-buttons">
  <div id="nav-north">\
    <<if $canLeave is true || ($canRetreat === true && $arrivedFromDirection === 'north')>>\
	  <<button "North">><<script>>
		setup.onRoomExit(State.variables.locationTitle, 'north');
	  <</script>><</button>>
	<<else>>\
	  <button disabled>North</button>
	<</if>>\
  </div>\
  <div id="nav-east">\
    <<if $canLeave is true || ($canRetreat === true && $arrivedFromDirection === 'east')>>\
	  <<button "East">><<script>>
	    setup.onRoomExit(State.variables.locationTitle, 'east');
	  <</script>><</button>>
	<<else>>\
	  <button disabled>East</button>
	<</if>>\
  </div>\
  <div id="nav-south">\
    <<if $canLeave is true || ($canRetreat === true && $arrivedFromDirection === 'south')>>\
      <<button "South">><<script>>
        setup.onRoomExit(State.variables.locationTitle, 'south');
      <</script>><</button>>
	<<else>>\
	  <button disabled>South</button>
	<</if>>\
  </div>\
  <div id="nav-west">\
    <<if $canLeave is true || ($canRetreat === true && $arrivedFromDirection === 'west')>>\
	  <<button "West">><<script>>
        setup.onRoomExit(State.variables.locationTitle, 'west');
      <</script>><</button>>
	<<else>>\
	  <button disabled>West</button>
	<</if>>\
  </div>\
</div>

MEMORIES [ $memories.length / $maxMemories ]
<<for $i to 0; $i lt $memories.length; ++$i>>
	<<print '[' + $memories[$i].title + ']'>>
<</for>>

/*
HAS VISITED
<<for $i to 0; $i lt Object.keys($hasVisited).length; ++$i>>
	<<print "[" + "[" + Object.keys($hasVisited)[$i] + "]" + "]">>
<</for>>\
<<unset $i>>

ROOM GRAPH
<<for $i to 0; $i lt Object.keys($roomGraph).length; ++$i>>
	<<print "[" + "[" + Object.keys($roomGraph)[$i] + "]" + "]">>
<</for>>\
<<unset $i>>
*/


:: INTRO {"position":"175,250","size":"100,100"}
/* Shunt to the first room */
<<goto $currentRoom>>


:: TEST_STUFF {"position":"175,475","size":"100,100"}
@@#buttonOne;<<button "Button One">>
  <<run $("#buttonOne button").prop("disabled", true)>>
<</button>>@@

@@#buttonTwo;<<button "Button Two">>
  <<run $("#buttonTwo button").prop("disabled", true)>>
<</button>>@@

<<set $list to Story.lookup("tags", "ROOM")>>\
<<for $i to 0; $i lt $list.length; ++$i>>
	<<print "[" + "[" + $list[$i].title + "]" + "]">>
<</for>>\
<<unset $list, $i>>


:: StoryInit {"position":"175,150","size":"100,100"}
<<include [[custom-macros]]>>
<<include [[CONSTANTS]]>>
<<include [[INITIALIZE]]>>
<<include [[ROOM_FNS]]>>
<<include [[MEMORY_FNS]]>>
<<include [[TERROR]]>>

<<script>>
State.prng.init('0');
<</script>>


:: MEMORY_FNS {"position":"50,350","size":"100,100"}
<<script>>

setup.addMemory = function(title, text, terrorDelta, terrorMin, terrorMax) {
  const memories = State.variables.memories;
  const maxMemories = State.variables.maxMemories;
  var evicted = undefined;

  if (memories.length + 1 > maxMemories) {
	evicted = memories[random(memories.length)];
	const evictedAt = memories.indexOf(evicted);
	memories.splice(evictedAt, 1);
  }
  memories.push({
    title: title,
	text: text,
	terrorDelta: terrorDelta,
	terrorMin: terrorMin,
	terrorMax: terrorMax
  })
  
  return evicted;
}

<</script>>

<<widget "addMemory">>\
  <<set $forgotten to setup.addMemory($args[0], $args[2], $args[2], $args[3], $args[4])>>\
  <<if $forgotten is not undefined>>\
    <div class='player-info'>[ Memory forgotten: $forgotten.title ]</div>\
  <</if>>\
  <div class='player-info'>[ Memory added: $args[0] ]</div>\
<</widget>>


:: ROOM_FNS {"position":"50,250","size":"100,100"}
<<script>>

/* TODO: You can get a roomGraph[passageTitle] is undefined error purging then revisiting a room! */

/* onRoomEntered is required to be called by each passage on entry */
setup.onRoomEntered = function(passageTitle, passageTitleText) {
  State.variables.locationTitle = passageTitle;
  State.variables.locationName = passageTitleText;
  const hasVisited = State.variables.hasVisited;

  hasVisited[passageTitle] = turns();

  if (Object.keys(hasVisited).length > 5) {
    // Find the least visited & purge it
    const byTurns = Object.entries(hasVisited)
	                      .sort((a, b) => { return a[1] - b[1]; })
						  .map(e => e[0])
						  .first();

	delete hasVisited[byTurns];

	const roomGraph = State.variables.roomGraph;
	const roomToUnlink = roomGraph[byTurns];
	Object.entries(roomToUnlink).forEach(kvp => {
	  if (kvp[1] != undefined) {
	    roomGraph[kvp[1]][setup.oppositeDirection(kvp[0])] = undefined;
	    roomToUnlink[kvp[0]] = undefined;
	  }
	})
	delete roomGraph[byTurns];
  }
}

const chooseNextRoom = function(passageTitle) {
  const mappedRooms = new Set(Object.keys(State.variables.roomGraph));

  // There's a 75% chance to pull a room in the same tag
  const fromSameTag = random(1, 100) < 75;
  if (!fromSameTag) {
    const passageTag = setup.passageTitleToTag(passageTitle);
    const roomsInTag = new Set(Story.lookup("tags", passageTag).map(p => p.title));
	const availableRoomsInTag = [...roomsInTag].filter(p => !mappedRooms.has(p));
	if (availableRoomsInTag.length > 1) {
	  return availableRoomsInTag[random(availableRoomsInTag.length - 1)];
	}
  }
  const allRoomSet = new Set(Story.lookup("tags", "ROOM").map(p => p.title));
  const availableAllRooms = [...allRoomSet].filter(p => !mappedRooms.has(p));
  return availableAllRooms[random(availableAllRooms.length - 1)];
}

setup.onRoomExit = function(passageTitle, direction) {
  State.variables.firstEntry = true;
  State.variables.arrivedFromDirection = setup.oppositeDirection(direction);

  const roomGraph = State.variables.roomGraph;
  if (roomGraph[passageTitle] != undefined && roomGraph[passageTitle][direction] != undefined) {
    Engine.play(roomGraph[passageTitle][direction]);
	return;
  }

  const chosenNextRoom = chooseNextRoom(passageTitle);
  roomGraph[chosenNextRoom] = { north: undefined, east: undefined, south: undefined, west: undefined }
  roomGraph[passageTitle][direction] = chosenNextRoom;
  roomGraph[chosenNextRoom][setup.oppositeDirection(direction)] = passageTitle;
  Engine.play(chosenNextRoom);
}

<</script>>


:: custom-macros {"position":"175,25","size":"100,100"}
<<script>>
// meters.min.js, for SugarCube 2, by Chapel
// v1.0.1, 2021-04-20, 53d1a20e9321b3782a303cf7dbe00f5c51e947db
;!function(){"use strict";var t=!0,e=!1,s=!1,i={full:"#2ECC40",empty:"#FF4136",back:"#DDDDDD",height:"12px",width:"180px",animate:400,easing:"swing",text:"#111111",label:"",align:"center"},n=["center","left","right"],r=["swing","linear"];function a(t,e){return t&&"string"==typeof t&&(t=t.toLowerCase().trim())?t:e||""}function o(t){return t<.5?2*t*t:(4-2*t)*t-1}function l(t,e){if(!(this instanceof l))return new l(t,e);var s=clone(i);this.settings=Object.assign(s,t),this.settings.align=a(this.settings.align),this.settings.easing=a(this.settings.easing),n.includes(this.settings.align)||(this.settings.align="center"),r.includes(this.settings.easing)||(this.settings.easing="swing"),e=Number(e),Number.isNaN(e)&&(e=1),e=Math.clamp(e,0,1),this.value=e;var h=$(document.createElement("div")).addClass("chapel-meter").attr({"data-val":e,"data-label":this.settings.label}).css({position:"relative","background-color":this.settings.back,height:this.settings.height,width:this.settings.width,overflow:"hidden"}),g=$(document.createElement("div")).addClass("meter-label").css({top:0,right:0,"font-size":this.settings.height,"font-weight":"bold","line-height":"100%",width:"100%",height:"100%","vertical-align":"middle","text-align":this.settings.align,color:this.settings.text,"z-index":1,position:"relative",bottom:"100%"}).wiki(this.settings.label).appendTo(h),u=$(document.createElement("div")).addClass("meter-top").css({"background-color":this.settings.full,opacity:o(this.value),width:"100%",height:"100%","z-index":0}),c=$(document.createElement("div")).addClass("meter-bottom").css({position:"absolute",top:0,left:0,"background-color":this.settings.empty,opacity:1,width:100*this.value+"%",height:"100%","z-index":0}).append(u).appendTo(h);this.$element=h,this.$bars={top:u,bottom:c},this.$label=g,g.css("font-size",parseInt(h.css("height"),10)<parseInt($(".passage").css("font-size"),10)?h.css("height"):$(".passage").css("font-size")),g.css("line-height",h.css("height"))}Object.assign(l,{_list:new Map,is:function(t){return t instanceof l},has:function(t){return l._list.has(t)&&l.is(l._list.get(t))},get:function(t){return l.has(t)?l._list.get(t):null},del:function(t){l.has(t)&&l._list.delete(t)},add:function(t,s,i){if(!l.has(t)||e){Object.assign(s,{id:t});var n=new l(s,i);return l._list.set(t,n),n}console.error('Meter "'+t+'" already exists.')},_emit:function(t,e){l.is(t)&&t.$element.trigger({type:":"+e,meter:t})}}),Object.assign(l.prototype,{constructor:l,_label:function(t){var e=this;function s(){e.$label.empty().wiki(e.settings.label),e.$label.css("font-size",parseInt(e.$element.css("height"),10)<parseInt(e.$element.parent().css("font-size"),10)?e.$element.css("height"):e.$element.parent().css("font-size")),e.$label.css("line-height",e.$element.css("height"))}return t?setTimeout(s,Engine.minDomActionDelay):s(),this},_width:function(){var t=this;return this.$bars.bottom.animate({width:100*this.value+"%"},this.settings.animate,this.settings.easing,(function(){l._emit(t,"meter-animation-complete")})),this},_color:function(){return this.$bars.top.animate({opacity:o(this.value)},this.settings.animate,this.settings.easing),this},animate:function(){return l._emit(this,"meter-animation-start"),this._color()._width()._label()},val:function(t){return void 0!==t&&(t=Number(t),Number.isNaN(t)&&(t=1),t=Math.clamp(t,0,1),this.value=t,this.animate()),this.value},options:function(t){return t&&"object"==typeof t&&Object.assign(this.settings,t),this.settings},unwrap:function(){return this.$element[0]},place:function(t,e){var s=$(document.createElement("span"));return t instanceof jQuery||(t=$(t)),t[0]||console.warn("meter#place() -> no valid target"),e&&"object"==typeof e&&(e.classes&&(Array.isArray(e.classes)||"string"==typeof e.classes)&&s.addClass(e.classes),e.attr&&"object"==typeof e.attr&&s.attr(e.attr)),t.append(s.append(this.$element)),this._label(!0),this},on:function(t,e){return"function"!=typeof e?this:t&&"string"==typeof t&&t.trim()?(t=t.split(" ").map((function(t){return(t=t.split(".")[0])+".userland"})).join(" "),this.$element.on(t,e),this):this},one:function(t,e){return"function"!=typeof e?this:t&&"string"==typeof t&&t.trim()?(t=t.split(" ").map((function(t){return(t=t.split(".")[0])+".userland"})).join(" "),this.$element.one(t,e),this):this},off:function(t){return t=t&&"string"==typeof t&&t.trim()?t.split(" ").map((function(t){return(t=t.split(".")[0])+".userland"})).join(" "):".userland",this.$element.off(t),this},click:function(t,e){return this.$element.ariaClick(t,e),this},clone:function(){return new l(this.settings,this.value)},toJSON:function(){return JSON.reviveWrapper("new setup.Meter("+JSON.stringify(this.settings)+", "+this.value+")")}}),setup.Meter=l,t&&(window.Meter=window.Meter||l),Macro.add("newmeter",{tags:["colors","sizing","animation","label"],handler:function(){if(State.length>0&&!s)return this.error("The `<<newmeter>>` macro must be called in your `StoryInit` special passage. Seriously. No excuses. --Love, Chapel");if(this.args.length<1)return this.error("The `<<newmeter>>` macro requires at least one argument: a meter name.");var t=this.args[0],i=null,n=null,r=null,a=null;if("string"!=typeof t)return this.error("Invalid meter name.");if(t=t.trim(),l.has(t)&&!e)return this.error('Cannot clobber the existing meter "'+t+'".');this.payload.length&&(i=this.payload.find((function(t){return"colors"===t.name})),n=this.payload.find((function(t){return"sizing"===t.name})),r=this.payload.find((function(t){return"animation"===t.name})),a=this.payload.find((function(t){return"label"===t.name})));var o={};if(i){if(!i.args.length)return this.error("No arguments passed to the `<<colors>>` tag.");switch(i.args.length){case 1:o.empty=i.args[0],o.full="transparent";break;case 2:o.full=i.args[0],o.empty=i.args[1];break;default:o.full=i.args[0],o.empty=i.args[1],o.back=i.args[2]}}if(n){if(!n.args.length)return this.error("No arguments passed to the `<<sizing>>` tag.");o.width=n.args[0],n.args[1]&&(o.height=n.args[1])}if(r){if(!r.args.length)return this.error("No arguments passed to the `<<animation>>` tag.");if("boolean"!=typeof r.args[0]||r.args[0]){if("string"!=typeof r.args[0])return this.error("The argument to the `<<animation>>` tag should be `true`, `false`, or a valid CSS time value.");o.animate=Util.fromCssTime(r.args[0])}else o.animate=0;r.args[1]&&["swing","linear"].includes(r.args[1])&&(o.easing=r.args[1])}if(a){var h=a.args[0];if(!h||"string"!=typeof h)return this.error("The labelText argument for the `<<label>>` tag is required.");o.label=h.trim(),a.args[1]&&"string"==typeof a.args[1]&&(o.text=a.args[1]),a.args[2]&&"string"==typeof a.args[2]&&(o.align=a.args[2])}l.add(t,o,this.args[1])}}),Macro.add("showmeter",{handler:function(){if(this.args.length<1)return this.error("This macro requires at least one argument: the meter's name.");var t=this.args[0];if("string"!=typeof t)return this.error("Invalid meter name.");t=t.trim();var e=l.get(t);if(!e||!l.is(e))return this.error('The meter "'+t+'" does not exist.');"number"==typeof this.args[1]&&e.val(this.args[1]),e.place(this.output,{classes:"macro-"+this.name,attr:{id:"meter-"+Util.slugify(t)}})}}),Macro.add("updatemeter",{handler:function(){if(this.args.length<2)return this.error("This macro requires two arguments: the meter's name and a value.");var t=this.args[0];if("string"!=typeof t)return this.error("Invalid meter name.");t=t.trim();var e=l.get(t);if(!e||!l.is(e))return this.error('The meter "'+t+'" does not exist.');e.val(this.args[1])}})}();
// end meters.min.js
<</script>>


:: TERROR {"position":"50,450","size":"100,100"}
<<set $terrorMeter to 'TERROR_METER'>>
<<newmeter $terrorMeter 0.5>>
  <<colors '#DC143C' '#D3D3D3' '#F8F8FF'>>
<</newmeter>>

/* TODO: Game over! */
<<widget "updateTerror">>\
  <<set $terror to ($terror + $args[0])>>\
  <<updatemeter $terrorMeter `$terror / 100.0`>>\
  <<if $args[0] gt 0>>\
    <div class='player-info'>[ Your terror has increased by $args[0]. ]</div>\
  <<elseif $args[0] lt 0>>\
    <<set $_dt to $args[0] * -1>>\
    <div class='player-info'>[ Your terror has decreased by $_dt. ]</div>\
  <</if>>\
<</widget>>\


:: INITIALIZE {"position":"50,150","size":"100,100"}
/* Initialize terror */
<<set $terror to 50>>

/* Initialize memory inventory */
<<set $memories to []>>
<<set $seenMemoryTitles to []>>
<<set $maxMemories to 12>>
<<set $lastForgotten to ''>>

/* Initialize individual room travel variables */
<<set $locationName to undefined>>
<<set $firstEntry to true>>
<<set $arrivedFromDirection to undefined>>
<<set $canLeave to false>>

/* Initialize individual room variables */
<<include [[INIT_SS]]>>

/* Initialize visitation history, room graph */
<<set $hasVisited to {}>>
<<set $allRooms to Story.lookup('tags', 'ROOM')>>
/*<<set $currentRoom to $allRooms[random($allRooms.length - 1)].title>>*/
<<set $currentRoom to 'STRANGE_PLACE_LEECHES'>>
<<set $roomGraph to {}>>
<<set $roomGraph[$currentRoom] to {
  north: undefined,
  east: undefined,
  south: undefined,
  west: undefined
}>>


:: CONSTANTS {"position":"50,50","size":"100,100"}
<<script>>

const directionsToOpposites = {
  north: "south",
  east: "west",
  south: "north",
  west: "east"
}

setup.oppositeDirection = function(d) {
  return directionsToOpposites[d];
}

const passageTitlesToTags = {
  BETTYS_LIVING_ROOM: 'JULIANN',
  BETTYS_BACKYARD: 'JULIANN',
  JULIANNS_APARTMENT: 'JULIANN',
  CURTIS_ST_DOWN_DOWNSTAIRS: 'CURTIS_ST',
  CURTIS_ST_BEDROOM: 'CURTIS_ST',
  CURTIS_ST_MIDDLE_BATHROOM: 'CURTIS_ST',
  ASTHMA_HOSPITAL_EMERGENCY_ROOM: 'HOSPITAL',
  ASTHMA_HOSPITAL_WARD: 'HOSPITAL',
  STRANGE_PLACE_SPIDERS: 'STRANGE_PLACE',
  STRANGE_PLACE_ET: 'STRANGE_PLACE',
  STRANGE_PLACE_VOLCANO: 'STRANGE_PLACE',
  STRANGE_PLACE_LEECHES: 'STRANGE_PLACE',
  VEGAS_THE_STRIP: 'VEGAS',
  VEGAS_THE_CASINO_FLOOR: 'VEGAS'
}

setup.passageTitleToTag = function(t) {
  return passageTitlesToTags[t];
}

<</script>>


:: INIT_SS {"position":"1450,625","size":"100,100"}
/* ET */
<<set $SS_ET_firstVisit to true>>
<<set $SS_ET_ETDiscovered to false>>
<<set $SS_ET_ETScared to false>>

/* Volcano */
<<set $SS_Volcano_climbedOnce to false>>
<<set $SS_Volcano_finished to false>>

/* Leeches */
<<set $SS_Leeches_fromDoor to true>>
